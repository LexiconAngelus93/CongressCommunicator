// Generated by view binder compiler. Do not edit!
package com.congress.app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.congress.app.R;
import com.google.android.material.chip.Chip;
import com.google.android.material.chip.ChipGroup;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.textfield.TextInputEditText;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final Chip chipAll;

  @NonNull
  public final Chip chipDemocrat;

  @NonNull
  public final Chip chipHouse;

  @NonNull
  public final Chip chipIndependent;

  @NonNull
  public final Chip chipRepublican;

  @NonNull
  public final Chip chipSenate;

  @NonNull
  public final RecyclerView congressMembersRecyclerView;

  @NonNull
  public final FloatingActionButton fabCall;

  @NonNull
  public final FloatingActionButton fabEmail;

  @NonNull
  public final ChipGroup filterChipGroup;

  @NonNull
  public final TextInputEditText searchEditText;

  @NonNull
  public final Toolbar toolbar;

  private ActivityMainBinding(@NonNull CoordinatorLayout rootView, @NonNull Chip chipAll,
      @NonNull Chip chipDemocrat, @NonNull Chip chipHouse, @NonNull Chip chipIndependent,
      @NonNull Chip chipRepublican, @NonNull Chip chipSenate,
      @NonNull RecyclerView congressMembersRecyclerView, @NonNull FloatingActionButton fabCall,
      @NonNull FloatingActionButton fabEmail, @NonNull ChipGroup filterChipGroup,
      @NonNull TextInputEditText searchEditText, @NonNull Toolbar toolbar) {
    this.rootView = rootView;
    this.chipAll = chipAll;
    this.chipDemocrat = chipDemocrat;
    this.chipHouse = chipHouse;
    this.chipIndependent = chipIndependent;
    this.chipRepublican = chipRepublican;
    this.chipSenate = chipSenate;
    this.congressMembersRecyclerView = congressMembersRecyclerView;
    this.fabCall = fabCall;
    this.fabEmail = fabEmail;
    this.filterChipGroup = filterChipGroup;
    this.searchEditText = searchEditText;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.chipAll;
      Chip chipAll = ViewBindings.findChildViewById(rootView, id);
      if (chipAll == null) {
        break missingId;
      }

      id = R.id.chipDemocrat;
      Chip chipDemocrat = ViewBindings.findChildViewById(rootView, id);
      if (chipDemocrat == null) {
        break missingId;
      }

      id = R.id.chipHouse;
      Chip chipHouse = ViewBindings.findChildViewById(rootView, id);
      if (chipHouse == null) {
        break missingId;
      }

      id = R.id.chipIndependent;
      Chip chipIndependent = ViewBindings.findChildViewById(rootView, id);
      if (chipIndependent == null) {
        break missingId;
      }

      id = R.id.chipRepublican;
      Chip chipRepublican = ViewBindings.findChildViewById(rootView, id);
      if (chipRepublican == null) {
        break missingId;
      }

      id = R.id.chipSenate;
      Chip chipSenate = ViewBindings.findChildViewById(rootView, id);
      if (chipSenate == null) {
        break missingId;
      }

      id = R.id.congressMembersRecyclerView;
      RecyclerView congressMembersRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (congressMembersRecyclerView == null) {
        break missingId;
      }

      id = R.id.fabCall;
      FloatingActionButton fabCall = ViewBindings.findChildViewById(rootView, id);
      if (fabCall == null) {
        break missingId;
      }

      id = R.id.fabEmail;
      FloatingActionButton fabEmail = ViewBindings.findChildViewById(rootView, id);
      if (fabEmail == null) {
        break missingId;
      }

      id = R.id.filterChipGroup;
      ChipGroup filterChipGroup = ViewBindings.findChildViewById(rootView, id);
      if (filterChipGroup == null) {
        break missingId;
      }

      id = R.id.searchEditText;
      TextInputEditText searchEditText = ViewBindings.findChildViewById(rootView, id);
      if (searchEditText == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivityMainBinding((CoordinatorLayout) rootView, chipAll, chipDemocrat, chipHouse,
          chipIndependent, chipRepublican, chipSenate, congressMembersRecyclerView, fabCall,
          fabEmail, filterChipGroup, searchEditText, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
